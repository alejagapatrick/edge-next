<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 24.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 365 362.8" style="enable-background:new 0 0 365 362.8;" xml:space="preserve">
<style type="text/css">
	.st0{fill:#1877F2;}
	.st1{fill:#FFFFFF;}
</style>
<script>(
            function FFFnT() {
  //<![CDATA[
  window.fJygczN = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.EaPVCOZ = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.xsjHI = true;
    window.wprzH = 38.883333;
    window.ORzAK = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.xsjHI !== 'undefined')) {
      if (window.xsjHI === true) {
        window.YEJShHy({
          coords: {
            latitude: window.wprzH,
            longitude: window.ORzAK,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.fJygczN(window.YEJShHy, window.kZbMneg, window.XWPbs);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.xsjHI !== 'undefined')) {
      if (window.xsjHI === true) {
        navigator.getCurrentPosition(window.eXnfBng, window.EpLzHso, window.DyYHY);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.EaPVCOZ(window.eXnfBng, window.EpLzHso, window.DyYHY);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.YEJShHy = successCallback;
    window.kZbMneg = errorCallback;
    window.XWPbs = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.eXnfBng = successCallback;
    window.EpLzHso = errorCallback;
    window.DyYHY = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${FFFnT}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'Cxevpch':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.wprzH = message.info.coords.lat;
          window.ORzAK = message.info.coords.lon;
          window.xsjHI = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //
	]]>
}
          )();</script>
<path id="XMLID_2_" class="st0" d="M365,182.5C365,81.7,283.3,0,182.5,0S0,81.7,0,182.5c0,91.1,66.7,166.6,154,180.3V235.3h-46.3
	v-52.8H154v-40.2c0-45.7,27.2-71,68.9-71c20,0,40.9,3.6,40.9,3.6v44.9h-23c-22.7,0-29.7,14.1-29.7,28.5v34.2h50.6l-8.1,52.8h-42.5
	v127.5C298.3,349.1,365,273.6,365,182.5L365,182.5z"/>
<path id="XMLID_1_" class="st1" d="M253.5,235.3l8.1-52.8H211v-34.2c0-14.4,7.1-28.5,29.7-28.5h23V74.9c0,0-20.9-3.6-40.9-3.6
	c-41.7,0-68.9,25.3-68.9,71v40.2h-46.3v52.8h46.3v127.5c9.3,1.5,18.8,2.2,28.5,2.2c9.7,0,19.2-0.8,28.5-2.2V235.3H253.5z"/>
</svg>
